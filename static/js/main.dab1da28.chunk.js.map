{"version":3,"sources":["index.js"],"names":["Square","props","className","onClick","value","Board","state","squares","Array","fill","xIsNext","i","this","handleClick","slice","setState","status","renderSquare","React","Component","Game","ReactDOM","render","document","getElementById"],"mappings":"+PA6BA,SAASA,EAAOC,GACZ,OACI,4BAAQC,UAAY,SAASC,QAAWF,EAAME,SACzCF,EAAMG,MADX,K,IAOFC,E,kDAEJ,WAAYJ,GAAO,IAAD,8BACd,cAAMA,IACDK,MAAQ,CAETC,QAASC,MAAM,GAAGC,KAAK,MAEvBC,SAAS,GANC,E,yDAULC,GAAI,IAAD,OACd,OAAO,kBAACX,EAAD,CAEHI,MAASQ,KAAKN,MAAMC,QAAQI,GAE5BR,QAAW,kBAAM,EAAKU,YAAYF,Q,kCAI5BA,GAEV,IAAMJ,EAAUK,KAAKN,MAAMC,QAAQO,QAEnCP,EAAQI,GAAKC,KAAKN,MAAMI,QAAU,IAAM,IACxCE,KAAKG,SAAS,CACVR,QAASA,EACTG,SAAUE,KAAKN,MAAMI,Y,+BAKzB,IAAMM,EAAS,iBAAmBJ,KAAKN,MAAMI,QAAU,IAAM,KAE7D,OACE,6BACE,yBAAKR,UAAU,UAAUc,GACzB,yBAAKd,UAAU,aACZU,KAAKK,aAAa,GAClBL,KAAKK,aAAa,GAClBL,KAAKK,aAAa,IAErB,yBAAKf,UAAU,aACZU,KAAKK,aAAa,GAClBL,KAAKK,aAAa,GAClBL,KAAKK,aAAa,IAErB,yBAAKf,UAAU,aACZU,KAAKK,aAAa,GAClBL,KAAKK,aAAa,GAClBL,KAAKK,aAAa,S,GAnDTC,IAAMC,WA0DpBC,E,uKAEF,OACE,yBAAKlB,UAAU,QACb,yBAAKA,UAAU,cACb,kBAACG,EAAD,OAEF,yBAAKH,UAAU,aACb,8BACA,mC,GATSgB,IAAMC,WAsCzBE,IAASC,OACP,kBAACF,EAAD,MACAG,SAASC,eAAe,W","file":"static/js/main.dab1da28.chunk.js","sourcesContent":["import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\n//class declaration of a square in tic tac toe\n// class Square extends React.Component {\n\n//   constructor(props){\n//       super(props);\n//       this.state = {\n//           value : null,\n//       };\n//   }\n\n//   render() {\n//     return (\n//       <button \n//         className=\"square\" \n//         onClick = {() => this.props.onClick() }\n//       >\n//         {this.props.value}\n//       </button>\n//     );\n//   }\n// }\n/*Square class converted into square function\n thus allowing in to stop usuing this.props \n and returning just the required rendering \n as the control of data has now moved to the parent\n */\nfunction Square(props){\n    return (\n        <button className = \"square\" onClick = {props.onClick}>\n            {props.value};\n        </button>\n    );\n}\n/*React Class representation of the TicTacToe\n*/\nclass Board extends React.Component {\n    //Construtor with the initiaiztion and setting X as first \n  constructor(props){\n      super(props);\n      this.state = {\n          //state of the board\n          squares: Array(9).fill(null),\n          //turn of the player\n          xIsNext: true,\n      };\n  }\n  //render square function call\n  renderSquare(i) {\n    return <Square \n        //value passed\n        value = {this.state.squares[i]}\n        //onclick handler called\n        onClick = {() => this.handleClick(i)}\n    />;\n  }\n\n  handleClick(i) {\n    //array of the square state taken\n    const squares = this.state.squares.slice();\n\n    squares[i] = this.state.xIsNext ? 'X' : 'O';\n    this.setState({\n        squares: squares,\n        xIsNext: !this.state.xIsNext,\n    });\n  }\n\n  render() {\n    const status = 'Next player: ' + (this.state.xIsNext ? 'X' : 'O');\n\n    return (\n      <div>\n        <div className=\"status\">{status}</div>\n        <div className=\"board-row\">\n          {this.renderSquare(0)}\n          {this.renderSquare(1)}\n          {this.renderSquare(2)}\n        </div>\n        <div className=\"board-row\">\n          {this.renderSquare(3)}\n          {this.renderSquare(4)}\n          {this.renderSquare(5)}\n        </div>\n        <div className=\"board-row\">\n          {this.renderSquare(6)}\n          {this.renderSquare(7)}\n          {this.renderSquare(8)}\n        </div>\n      </div>\n    );\n  }\n}\n\nclass Game extends React.Component {\n  render() {\n    return (\n      <div className=\"game\">\n        <div className=\"game-board\">\n          <Board />\n        </div>\n        <div className=\"game-info\">\n          <div>{/* status */}</div>\n          <ol>{/* TODO */}</ol>\n        </div>\n      </div>\n    );\n  }\n}   \n\n//To calculate winner of tic tac toe\nfunction calculateWinner(squares) {\n  const lines = [\n    [0, 1, 2],\n    [3, 4, 5],\n    [6, 7, 8],\n    [0, 3, 6],\n    [1, 4, 7],\n    [2, 5, 8],\n    [0, 4, 8],\n    [2, 4, 6],\n  ];\n  for (let i = 0; i < lines.length; i++) {\n    const [a, b, c] = lines[i];\n    if (squares[a] && squares[a] === squares[b] && squares[a] === squares[c]) {\n      return squares[a];\n    }\n  }\n  return null;\n}\n// ========================================\n\nReactDOM.render(\n  <Game />,\n  document.getElementById('root')\n);\n"],"sourceRoot":""}